CALL apoc.load.xml($xml_url) YIELD value as root

UNWIND [v in root._children WHERE v._type = 'group'] as value
// Groups can be comma-separated; splits them and creates one Group node per name (MERGE ensures no duplicates)
UNWIND apoc.text.split(value.name, ",") AS groupName
MERGE (g:Group {name: groupName}) //create group
//Extract rules inside the group
WITH value, g
UNWIND [c IN value._children WHERE c IS NOT NULL AND c._type = "rule"] AS parsed_rule


MERGE (rule_node:Rule {rule_id: parsed_rule.id, source_file: $xml_url}) //create rule node
MERGE (rule_node)-[:BELONGS]->(g) // assign rule node to group

WITH parsed_rule, rule_node
CALL (parsed_rule, rule_node){
// Extract parent id (if_sid or if_matched_sid value)
    WITH parsed_rule, rule_node
    UNWIND [elem IN parsed_rule._children WHERE elem._type IN ["if_sid", "if_matched_sid"] | split(elem._text, [",", " "])] as parents
    UNWIND parents as parent
    WITH btrim(parent) AS parent WHERE NOT parent = ""
    WITH collect(parent) as parents, rule_node
    WITH apoc.coll.toSet(parents) AS parents, rule_node WHERE size(parents) > 0
    SET rule_node.parents = parents
    RETURN parents
}
// add the inline rule properties like frequency
WITH parsed_rule,  rule_node
CALL (parsed_rule,  rule_node) {
        //Filter rule properties to ignore internal ones (those starting with _)
        WITH [prop_name IN keys(parsed_rule) WHERE NOT prop_name STARTS WITH "_" and prop_name <> 'id'] AS prop_names, parsed_rule,  rule_node
        //Set remaining properties (like frequency, level, etc.) on the rule node
        CALL apoc.create.setProperties(rule_node, prop_names, [prop_name IN prop_names | parsed_rule[prop_name]]) YIELD node
        RETURN node
}

// add group relation (add additional groups listed within a rule - a rule may refer to additional groups)
WITH parsed_rule,  rule_node
CALL (parsed_rule,  rule_node) {
        WITH [gr IN parsed_rule._children WHERE gr._type='group'] AS groupElems, parsed_rule,  rule_node
        UNWIND groupElems AS groupElem
        UNWIND apoc.text.split(groupElem._text, ",") AS groupName
        MERGE (gg:Group {name: groupName})
        MERGE (rule_node)-[:BELONGS]->(gg)
}

// add the attributes dynamically
CALL (parsed_rule, rule_node) {
  UNWIND parsed_rule._children AS child
  WITH child, rule_node
  WHERE child._type IS NOT NULL AND NOT child._type IN ['group', 'if_matched_sid', 'field', 'if_sid', 'rule', 'mitre']
  WITH rule_node, child
  UNWIND [k IN keys(child) WHERE k <> "_type"] AS attr_key
  WITH rule_node,
        CASE
                WHEN attr_key = "_text" THEN child._type
                ELSE child._type + "." + attr_key 
        END AS attr_prop
        ,child[attr_key] AS attr_val
  CALL apoc.create.setProperty(rule_node, attr_prop, attr_val) YIELD node
  return node
}

//add mitre

// add named fields
CALL (parsed_rule, rule_node) {
	  // for each field, create a property on the rule like '"Field: myFieldName = "value"'
	  UNWIND [field IN parsed_rule._children WHERE field._type = "field"] AS field
       
	  // Now process all other attributes except `name`
	  WITH rule_node, field.name AS field_name, field
	  UNWIND [k IN keys(field) WHERE k <> "name" AND k <> "_type"] AS attr_key
	  WITH rule_node,
                "field." + 
                CASE
                        WHEN attr_key = "_text" THEN field_name
                        ELSE field_name + "." + attr_key 
                END AS attr_prop
                ,field[attr_key] AS attr_val

	  CALL apoc.create.setProperty(rule_node, attr_prop, attr_val) YIELD node AS updated
	  RETURN updated

}

RETURN rule_node, parsed_rule



